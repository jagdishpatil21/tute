def longest_word(s):
    words = s.split()
    longest = max(words, key=len)
    return longest

def char_frequency(s, char):
    return s.count(char)

def is_palindrome(s):
    s = s.lower()
    return s == s[::-1]

def first_appearance_index(s, substring):
    return s.find(substring)

def word_occurrences(s):
    words = s.split()
    word_count = {}
    
    for word in words:
        word_count[word] = word_count.get(word, 0) + 1
    
    return word_count

def main():
    input_string = input("Enter a string: ")

    # Display word with the longest length
    longest = longest_word(input_string)
    print(f"Word with the longest length: {longest}")

    # Determines the frequency of occurrence of a particular character
    char_to_check = input("Enter a character to check its frequency: ")
    frequency = char_frequency(input_string, char_to_check)
    print(f"Frequency of '{char_to_check}': {frequency}")

    # Check whether the string is a palindrome or not
    if is_palindrome(input_string):
        print("The given string is a palindrome.")
    else:
        print("The given string is not a palindrome.")

    # Display index of first appearance of the substring
    substring_to_find = input("Enter a substring to find its index: ")
    index = first_appearance_index(input_string, substring_to_find)
    
    if index != -1:
        print(f"Index of first appearance of '{substring_to_find}': {index}")
    else:
        print(f"'{substring_to_find}' not found in the string.")

    # Count the occurrences of each word in the string
    word_count = word_occurrences(input_string)
    print("Word occurrences:")
    for word, count in word_count.items():
        print(f"{word}: {count}")

if __name__ == "__main__":
    main()

