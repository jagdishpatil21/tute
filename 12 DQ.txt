#include <iostream>
using namespace std;

#define MAX 10 // Set your desired maximum size

class Deque {
private:
    int front, rear, capacity;
    int* array;

public:
    Deque() {
        capacity = MAX;
        front = -1;
        rear = 0;
        array = new int[capacity];
    }

    ~Deque() {
        delete[] array;
    }

    bool isFull() {
        return ((front == 0 && rear == capacity - 1) || front == rear + 1);
    }

    bool isEmpty() {
        return front == -1;
    }

    void insertFront(int key) {
        if (isFull()) {
            cout << "Deque is full. Cannot insert at front.\n";
            return;
        }

        if (front == -1) {
            front = rear = 0;
        } else if (front == 0) {
            front = capacity - 1;
        } else {
            front--;
        }

        array[front] = key;
        cout << "Inserted " << key << " at the front.\n";
    }

    void insertRear(int key) {
        if (isFull()) {
            cout << "Deque is full. Cannot insert at rear.\n";
            return;
        }

        if (front == -1) {
            front = rear = 0;
        } else if (rear == capacity - 1) {
            rear = 0;
        } else {
            rear++;
        }

        array[rear] = key;
        cout << "Inserted " << key << " at the rear.\n";
    }

    void deleteFront() {
        if (isEmpty()) {
            cout << "Deque is empty. Cannot delete from front.\n";
            return;
        }

        if (front == rear) {
            front = rear = -1;
        } else if (front == capacity - 1) {
            front = 0;
        } else {
            front++;
        }

        cout << "Deleted element from the front.\n";
    }

    void deleteRear() {
        if (isEmpty()) {
            cout << "Deque is empty. Cannot delete from rear.\n";
            return;
        }

        if (front == rear) {
            front = rear = -1;
        } else if (rear == 0) {
            rear = capacity - 1;
        } else {
            rear--;
        }

        cout << "Deleted element from the rear.\n";
    }

    void display() {
        if (isEmpty()) {
            cout << "Deque is empty.\n";
            return;
        }

        int i = front;
        cout << "Deque: ";
        do {
            cout << array[i] << " ";
            i = (i + 1) % capacity;
        } while (i != (rear + 1) % capacity);

        cout << endl;
    }
};

int main() {
    Deque myDeque;

    int choice;
    do {
        cout << "\nDeque Operations:\n";
        cout << "1. Insert at Front\n";
        cout << "2. Insert at Rear\n";
        cout << "3. Delete from Front\n";
        cout << "4. Delete from Rear\n";
        cout << "5. Display Deque\n";
        cout << "6. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                int elementFront;
                cout << "Enter the element to insert at the front: ";
                cin >> elementFront;
                myDeque.insertFront(elementFront);
                break;
            case 2:
                int elementRear;
                cout << "Enter the element to insert at the rear: ";
                cin >> elementRear;
                myDeque.insertRear(elementRear);
                break;
            case 3:
                myDeque.deleteFront();
                break;
            case 4:
                myDeque.deleteRear();
                break;
            case 5:
                myDeque.display();
                break;
            case 6:
                cout << "Exiting the program. Thank you!\n";
                break;
            default:
                cout << "Invalid choice. Please try again.\n";
        }
    } while (choice != 6);

    return 0;
}
